[{"title":"Docker下安装mongo 4.0","date":"2018-10-31T12:03:04.000Z","path":"2018/10/31/docker-mongo-v4/","text":"Docker下安装mongo 4.0 | 使用官方mongo镜像安装. 安装说明: 使用docker-componse编排，安装mongo以及mongo-express mongo使用host网络。 指定root用户名及密码 挂载数据卷:db、configdb 前期准备 安装docker-compose ubuntu 简易安装: apt-get install docker-compose -y linux 通用安装(同样适用于ubuntu): sudo curl -L \"https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose 官方详细安装手册：docker-compose install 编写编排文件 version: '3.1' services: mongo: image: mongo:4.0 restart: always environment: MONGO_INITDB_ROOT_USERNAME: root MONGO_INITDB_ROOT_PASSWORD: your-password network_mode: host volumes: - /data/mongo/db:/data/db - /data/mongo/configdb:/data/configdb mongo-express: image: mongo-express restart: always ports: - 8081:8081 environment: ME_CONFIG_MONGODB_SERVER: your-host-ip ME_CONFIG_MONGODB_ADMINUSERNAME: root ME_CONFIG_MONGODB_ADMINPASSWORD: your-password 创建数据库、及账号 登录docker容器 docker exec -it mongo_container_name bash 以root身份连接mongo mongo -u root -p your-password --authenticationDatabase admin 给指定db新增用户(owner) use testdb; db.createUser( { user: \"testdb\", pwd:\"your-testdb-password\", roles: [ { role: \"dbOwner\", db: \"testdb\" } ] } ) 新增管理员(admin) use admin; db.createUser({ user:\"admin\", pwd:\"your-admin-password\", roles:[ { role:\"userAdminAnyDatabase\", db:\"admin\" } ] }) 使用 python 3.7 API 操作 mongo 4 from pymongo import MongoClient import pprint def connectDB(): client = MongoClient( 'host', username='testdb', password='your password', authSource='testdb', authMechanism='SCRAM-SHA-256') # uri = \"mongodb://user:password@example.com/?authSource=the_database&amp;authMechanism=SCRAM-SHA-256\" # client = MongoClient(uri) db = client.testdb return db if __name__ == \"__main__\": db = connectDB() collection = db.posts pprint.pprint(collection.find_one()) post = {'name': 'tt5','written_by': 'Tom', 'composed_by': 'Tom'} id = collection.insert_one(post).inserted_id print(id) pprint.pprint(collection.find_one({'name':'tt5'})) 转载请注明出处，本文采用 CC4.0 协议授权","tags":[{"name":"Docker","slug":"Docker","permalink":"https://liwei.blog/tags/Docker/"},{"name":"Mongo","slug":"Mongo","permalink":"https://liwei.blog/tags/Mongo/"},{"name":"Mongo 4","slug":"Mongo-4","permalink":"https://liwei.blog/tags/Mongo-4/"}]},{"title":"InfluxDB + Grafana对Gitlab进行监控","date":"2018-05-05T05:02:03.000Z","path":"2018/05/05/influxdb-grafana-gitlab-metrics/","text":"前言 对于使用gitlab作代码仓库的、可以通过集成InfluxDB + Grafana 轻松实现对Gitlab服务器资源以及各度量指标的监控。 安装环境：Centos7 软件版本：InfluxDB 1.5、 Grafana 5.1.0 先上图看下效果： InfluxDB安装 安装系统为centos 7、ubuntu等均可参考。官方安装文档 1. 设置安装源 cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/influxdb.repo [influxdb] name = InfluxDB Repository - RHEL \\$releasever baseurl = https://repos.influxdata.com/rhel/\\$releasever/\\$basearch/stable enabled = 1 gpgcheck = 1 gpgkey = https://repos.influxdata.com/influxdb.key EOF 2. yum安装 sudo yum install influxdb sudo service influxdb start 3. 配置简介 通常需要按需指定influxdb的数据存储位置设置为数据盘某存储路径、例如: /data/influxdb,确保data对应的分区有足够的存储空间。 磁盘路径设置 vim /etc/influxdb/influxdb.conf ... [meta] dir = \"/data/influxdb/meta\" ... ... [data] dir = \"/data/influxdb/data\" ... wal-dir = \"/data/influxdb/wal\" ... ... [hinted-handoff] ... dir = \"/data/influxdb/hh\" ... 为gitlab启用UDP协议以及配置相应的influxdb数据库名、端口、数据库名与gitlab influxdb配置相对应，配置大致如下： [[udp]] enabled = true bind-address = \":8089\" # the bind address database = \"gitlab\" # Name of the database that will be written to batch-size = 5000 # will flush if this many points get buffered batch-timeout = \"1s\" # will flush at least this often even if the batch-size is not reached batch-pending = 10 # number of batches that may be pending in memory read-buffer = 0 # UDP read buffer, 0 means to use OS default Grafana安装、配置 1. 安装Grafana 官方安装文档 wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-5.1.0-1.x86_64.rpm sudo yum localinstall grafana-5.1.0-1.x86_64.rpm 2. 修改配置 vi /etc/grafana/grafana.ini data = /data/grafana 为sqlite数据库文件存储位置、plugins = /data/grafana/plugins为插件存储路径 使用docker部署时需要通过挂载卷持久化。 按需设置认证方式，支持多种认证方式（Basic auth、google auth、github auth、LDAP 等…） 3. grafana gitlab监控 dashbord导入 使用ID为3749如下dashboard: Gitlab配置 gitlab 管理员设置中启用influxdb指标，配置如下:","tags":[{"name":"Gitlab","slug":"Gitlab","permalink":"https://liwei.blog/tags/Gitlab/"},{"name":"CI/CD","slug":"CI-CD","permalink":"https://liwei.blog/tags/CI-CD/"}]},{"title":"Gitlab数据备份到AWS S3","date":"2017-09-19T08:05:07.000Z","path":"2017/09/19/gitlab_remote_backup_s3/","text":"准备S3存储桶 region: ‘cn-north-1’ aws_access_key_id aws_secret_access_key 修改gitlab配置文件 gitlab_rails['manage_backup_path'] = true gitlab_rails['backup_path'] = \"/var/opt/gitlab/backups\" gitlab_rails['backup_archive_permissions'] = 0644 # See: http://doc.gitlab.com/ce/raketasks/backup_restore.html#backup-archive-permissions gitlab_rails['backup_pg_schema'] = 'public' gitlab_rails['backup_keep_time'] = 604800 #gitlab_ci['backup_upload_connection'] = { gitlab_rails['backup_upload_connection'] = { 'provider' =&gt; 'AWS', 'region' =&gt; 'cn-north-1', 'aws_access_key_id' =&gt; '&lt;yousr aws ak&gt;', 'aws_secret_access_key' =&gt; '&lt;your aws sk&gt;' } gitlab_rails['backup_upload_remote_directory'] = '&lt;your bucket name&gt;' gitlab_rails['backup_multipart_chunk_size'] = 104857600 Reconfigure gitlab $ gitlabctl reconfigure 备份数据 $ gitlab-rake gitlab:backup:create DIRECTORY=gitlab_bakup/weekly","tags":[{"name":"Gitlab","slug":"Gitlab","permalink":"https://liwei.blog/tags/Gitlab/"},{"name":"CI/CD","slug":"CI-CD","permalink":"https://liwei.blog/tags/CI-CD/"}]},{"title":"Docker容器部署zookeeper集群","date":"2017-07-19T09:06:07.000Z","path":"2017/07/19/zookeeper-cluster-in-docker/","text":"部署zookeeper集群 集群规划 10.129.11.12 zk1 10.129.11.13 zk2 10.129.11.14 zk3 镜像 $ docker pull mesoscloud/zookeeper 启动容器 zk1上启动节点1 $ docker run -d \\ -v /data/svc/zookeeper/data:/data \\ -v /data/svc/zookeeper/log:/datalog \\ -e ZOO_MY_ID=1 \\ -e \"ZOO_SERVERS=server.1=10.129.11.12:2888:3888 server.2=10.129.11.13:2888:3888 server.3=10.129.11.14:2888:3888\" \\ --name=zookeeper --net=host --restart=always zookeeper:3.4.10 zk2上启动节点2 $ docker run -d \\ -v /data/svc/zookeeper/data:/data \\ -v /data/svc/zookeeper/log:/datalog \\ -e ZOO_MY_ID=2 \\ -e \"ZOO_SERVERS=server.1=10.129.11.12:2888:3888 server.2=10.129.11.13:2888:3888 server.3=10.129.11.14:2888:3888\" \\ --name=zookeeper --net=host --restart=always zookeeper:3.4.10 zk3 上启动节点3 $ docker run -d \\ -v /data/svc/zookeeper/data:/data \\ -v /data/svc/zookeeper/log:/datalog \\ -e ZOO_MY_ID=3 \\ -e \"ZOO_SERVERS=server.1=10.129.11.12:2888:3888 server.2=10.129.11.13:2888:3888 server.3=10.129.11.14:2888:3888\" \\ --name=zookeeper --net=host --restart=always zookeeper:3.4.10","tags":[{"name":"Docker","slug":"Docker","permalink":"https://liwei.blog/tags/Docker/"}]},{"title":"基于alpine构建镜像时关于时区修改问题","date":"2016-12-13T05:02:03.000Z","path":"2016/12/13/alpine-time-zone/","text":"构建docker镜像时依赖的官方镜像大多时区不是国内东八区,需要在build镜像时重新设置时区。 修改镜像源为阿里 echo -e \"http://mirrors.aliyun.com/alpine/v3.4/main\\nhttp://mirrors.aliyun.com/alpine/v3.4/community\" \\ &gt; /etc/apk/repositories &amp;&amp; apk update 安装tzdata apk add tzdata 拷贝对应时区止localtime cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 指定时区 echo \"Asia/Shanghai\" &gt; /etc/timezone 删除tzdata apk del tzdata Dockerfile 写法 FROM tomcat:alpine RUN echo -e \"http://mirrors.aliyun.com/alpine/v3.4/main\\nhttp://mirrors.aliyun.com/alpine/v3.4/community\" &gt; /etc/apk/repositories \\ &amp;&amp; apk update &amp;&amp; apk add tzdata \\ &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\ &amp;&amp; echo \"Shanghai/Asia\" &gt; /etc/timezone \\ &amp;&amp; apk del tzdata 转载请注明出处，本文采用 CC4.0 协议授权","tags":[{"name":"Docker","slug":"Docker","permalink":"https://liwei.blog/tags/Docker/"},{"name":"Alpine","slug":"Alpine","permalink":"https://liwei.blog/tags/Alpine/"},{"name":"Timezone","slug":"Timezone","permalink":"https://liwei.blog/tags/Timezone/"}]},{"title":"基于Dokcer容器部署分布式配置文件中心disconf","date":"2016-12-07T06:03:04.000Z","path":"2016/12/07/deploy-disconf-in-docker/","text":"Docker容器部署disconf 一、背景 随着容器技术、微服务架构的流行，互联网以及互联网转型ing企业已经逐步开始从单体架构解耦为微服务架构的同时，将传统应用/程序容器化部署。 容器化过程中，我们期望一个镜像可以运行在不同的环境（local,qa,rd…)。这意味着可配置信息要么通过系统变量供容器读取，这是最鼓励大家使用的方式，但是Java web开发历来都有繁琐的xml配置 比如spring XML config、 log4j/logback等等。通过变量传入意味着使用大量的环境变量。所以使用集中配置文件中心是解决java程序配置文件瓶颈的主要途径。 公司选择国内流行的百度disconf作为配置文件中心，本文主要讨论基于容器部署disconf。 二、编译disconf-web 暂时使用传统方式编译war包详情见 将来使用容器编译构建 三、镜像制作 FROM tomcat:alpine RUN echo -e \"http://mirrors.aliyun.com/alpine/v3.4/main\\nhttp://mirrors.aliyun.com/alpine/v3.4/community\" &gt; /etc/apk/repositories &amp;&amp; apk update RUN apk add --no-cache nginx &amp;&amp; mkdir /run/nginx &amp;&amp; rm -rf /usr/local/tomcat/webapps/* COPY app/disconf-web.war /usr/local/tomcat/webapps/ROOT.war RUN cd /usr/local/tomcat/webapps/ &amp;&amp; mkdir ROOT &amp;&amp; unzip ROOT.war -d ./ROOT &amp;&amp; rm ROOT.war COPY app/*.properties /usr/local/tomcat/webapps/ROOT/WEB-INF/classes/ COPY bin/entrypoint.sh /app/entrypoint.sh COPY nginx/nginx.conf /etc/nginx/nginx.conf COPY app/html /app/html RUN chmod u+x /app/entrypoint.sh WORKDIR /app EXPOSE 80 ENTRYPOINT ./entrypoint.sh 目前采用配置文件修改zk,mysql地址,可通过使用环境变量传入zk,redis,mysql等配置信息。 四、构建镜像 docker build --no-cache -t disconf:alpine . 五、启动容器 docker run --name -p 8000:8000 disconf disconf:alpine 转载请注明出处，本文采用 CC4.0 协议授权","tags":[{"name":"Disconf","slug":"Disconf","permalink":"https://liwei.blog/tags/Disconf/"},{"name":"Docker","slug":"Docker","permalink":"https://liwei.blog/tags/Docker/"}]}]